[{"/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/index.js":"1","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/App.js":"2","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/reportWebVitals.js":"3","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/Header.js":"4","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/components/About.js":"5","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/components/Navbar.js":"6","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/components/Home.js":"7","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/components/Contact.js":"8","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/dashboard/Dashboard.js":"9","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/dashboard/Draw.js":"10","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/dashboard/toolbox.js":"11","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/mbta-tracker/Map.js":"12","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/mbta-tracker/draw.js":"13","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/mbta-tracker/Vehicles.js":"14"},{"size":541,"mtime":1705460691527,"results":"15","hashOfConfig":"16"},{"size":927,"mtime":1706036768845,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1705460691528,"results":"18","hashOfConfig":"16"},{"size":100,"mtime":1705460691524,"results":"19","hashOfConfig":"16"},{"size":4575,"mtime":1705605025153,"results":"20","hashOfConfig":"16"},{"size":1166,"mtime":1706018908806,"results":"21","hashOfConfig":"16"},{"size":227,"mtime":1705460691526,"results":"22","hashOfConfig":"16"},{"size":828,"mtime":1705537973047,"results":"23","hashOfConfig":"16"},{"size":924,"mtime":1706031162993,"results":"24","hashOfConfig":"16"},{"size":9854,"mtime":1706295171651,"results":"25","hashOfConfig":"16"},{"size":1872,"mtime":1705683746563,"results":"26","hashOfConfig":"16"},{"size":3411,"mtime":1706038557484,"results":"27","hashOfConfig":"16"},{"size":1594,"mtime":1706109075963,"results":"28","hashOfConfig":"16"},{"size":6195,"mtime":1706287007609,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"1r7afcy",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"49","usedDeprecatedRules":"33"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"33"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"33"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"33"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"33"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},"/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/index.js",[],[],[],"/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/App.js",[],[],"/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/reportWebVitals.js",[],[],"/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/Header.js",[],[],"/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/components/About.js",[],[],"/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/components/Navbar.js",["81"],[],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useState } from \"react\";\n\nimport '../Navbar.css'; // Import your CSS file\nconst Navbar = () => {\n  const [showDropdown, setShowDropdown] = useState(false);\n\n  const handleDropdownToggle = () => {\n        setShowDropdown(!showDropdown);\n  }\n\n  return (\n    <nav className=\"navbar\">\n      <ul className={`navbar-links ${showDropdown ? 'show' : ''}`}>\n        <li><Link to=\"/\">Home</Link></li>\n        <li><Link to=\"/about\">About</Link></li>\n        <li><Link to=\"/contact\">Contact</Link></li>\n        <div className=\"border\"></div>\n        <li><Link to=\"/map\">Map</Link></li>\n        <li><Link to=\"/dashboard\">Dashboard</Link></li>\n      </ul>\n      <div className=\"dropdown-toggle\" onClick={handleDropdownToggle}>\n        <img src={process.env.PUBLIC_URL + '/hamburger.png'} alt=\"Icon\"/>\n      </div>\n      {/* Right-aligned icon */}\n        <div className=\"right-icon\">\n            <a target=\"_blank\" href=\"https://github.com/austinengel17\"><img src={process.env.PUBLIC_URL + '/github-mark/github-mark-white.png'} alt=\"Icon\" /></a>\n        </div>\n    </nav>\n  );\n};\n\nexport default Navbar;","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/components/Home.js",["82"],[],"import Navbar from './Navbar';\nfunction Home() {\n\n\n    return(\n        <>\n            <h1>Welcome to My Personal Site!</h1>\n            <p>Click on one of the links to get started!</p>\n        </>\n    );\n}\nexport default Home;\n","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/components/Contact.js",[],[],"/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/dashboard/Dashboard.js",["83"],[],"import './Dashboard.css';\nimport { useRef, useEffect, useState } from \"react\";\nimport Draw from './Draw.js';\n\nfunction Dashboard(){\n    const svgRef = useRef(null);\n    const bodyRef = useRef(null);\n    const [dataset, setDataset] = useState(null);\n    useEffect(() => {\n        import('./data.json').then((data)=>{\n            setDataset(data.default);\n        });\n    }, []);\n\n    return (<>\n       {dataset != null ? (\n                <div className=\"dashboard\">\n                    <h4 className=\"dashboard-heading\">D3 Visualization | Milestones</h4>\n                    <svg className=\"dashboard-svg\" id=\"diagram\" ref={svgRef}>\n                        `<Draw dataset={dataset} svgRef={svgRef}/>\n                    </svg>\n                    <div id='dashboard-table'></div>\n                </div>\n            )\n            :\n            (<div>Loading...</div>)\n        }\n        </>\n    );\n}\n\nexport default Dashboard;","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/dashboard/Draw.js",["84","85","86","87","88","89","90","91"],[],"import * as d3 from \"d3\";\nimport data from './data.json';\nimport * as Toolbox from './toolbox.js';\nimport { useRef, useEffect } from \"react\";\n\nfunction Draw({svgRef, dataset}){\n\n//---------------------Configure Data-------------------------//\nuseEffect(() => {\n      var data = JSON.parse(JSON.stringify(dataset));;\n      var milestoneArr;\n      var origData = [];\n      console.log(data);\n      console.log(\"orig data .. \", origData);\n      data.forEach(function(dataNode, index, arr) {\n        origData.push(JSON.parse(JSON.stringify(dataNode)));   //create duplicate array\n      });\n      console.log(\"checkpoint 1\");\n      data.forEach(function(dataNode, index, arr) {\n        for(var i = 1; i < 8; i++)\n          if(dataNode[\"Milestone \" + i])\n             dataNode[\"Milestone \" + i] = Toolbox.convertDate(dataNode[\"Milestone \" + i]);\n      });\n      console.log(\"----------checkpoint 2----\");\n      console.log(data);\n      console.log(\"--------------------------\");\n\n      milestoneArr = Toolbox.createMilestoneArr(data);\n      console.log(milestoneArr);\n      var milestoneIntervalArr = milestoneArr.map(intervalArr => {\n          return Toolbox.createIntervalMedian(intervalArr);\n      });\n      console.log(milestoneIntervalArr);\n\n\n   //---------------Draw-------------------//\n\n    var yAxis = 150;\n          var xStart = 70;\n          const svg = d3.select(svgRef.current)\n          .attr(\"viewBox\", `0 0 880 250`)\n          .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n          //create arrow marker\n          svg.append(\"defs\")\n          .append(\"marker\")\n          .attr(\"id\", \"arrow-marker\")\n          .attr(\"markerWidth\", 10)\n          .attr(\"markerHeight\", 10)\n          .attr(\"refX\", 8)\n          .attr(\"refY\", 5)\n          .attr(\"orient\", \"auto\")\n          .append(\"polygon\")\n          .attr(\"points\", \"0 0, 10 5, 0 10\")\n          .attr(\"fill\", \"black\");\n\n          //create milestone groups\n          var group = svg.selectAll(\"g\")\n            .data(milestoneIntervalArr)\n            .enter()\n            .append(\"g\")\n            .attr(\"transform\", function(d, i) { return \"translate(\" + (10 + i * 130) + \", \" + yAxis + \")\"; });\n\n          group.append(\"circle\")\n          .attr(\"cx\", 30)\n          .attr(\"cy\", 0)\n          .attr(\"r\", 10)\n          .attr(\"fill\", \"red\")\n          .attr(\"id\", function(d, i){return \"circle-\"+(i+1);})\n          .on(\"click\", handleClick);\n\n          group.append(\"line\")\n          .attr(\"x1\", 50)\n          .attr(\"y1\", 0)\n          .attr(\"x2\", d => d<10 ? 83: d<100 ? 80 : 75)\n          .attr(\"y2\", 0)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 1);\n\n\n          group.append(\"text\")\n          .text(function(d) {return d;})\n          .attr(\"width\", 40)\n          .attr(\"x\", 90) // Set the x-coordinate\n          .attr(\"y\", 5)\n          .attr(\"text-anchor\", \"middle\");\n\n\n          group.append(\"line\")\n          .attr(\"x1\", d => d<10 ? 97 : d<100 ? 100 : 105)\n          .attr(\"y1\", 0)\n          .attr(\"x2\", 140)\n          .attr(\"y2\", 0)\n          .attr(\"stroke\", \"black\")\n          .attr(\"stroke-width\", 1)\n          .attr(\"marker-end\", \"url(#arrow-marker)\");\n\n          group.append(\"text\")\n          .text(function(d, i) {return \"Milestone \" + (i + 1);})\n          .attr(\"width\", 100)\n          .attr(\"x\", 30) // Set the x-coordinate\n          .attr(\"y\", -40)\n          .attr(\"text-anchor\", \"middle\");\n\n          //add final milestone circle\n          var milestoneNGroup = svg.append(\"g\")\n            .attr(\"transform\", function(d, i) { return \"translate(\" + (10 + milestoneIntervalArr.length * 130) + \", \" + yAxis + \")\"; });\n          milestoneNGroup.append(\"circle\")\n            .attr(\"cx\", 30)\n            .attr(\"cy\", 0)\n            .attr(\"r\", 10)\n            .attr(\"fill\", \"red\")\n            .attr(\"id\", function(d, i){return \"circle-\"+(milestoneIntervalArr.length+1);})\n            .on(\"click\", handleClick);\n\n          milestoneNGroup.append(\"text\")\n          .text(function(d, i) {return \"Milestone \" + (milestoneIntervalArr.length+1);})\n          .attr(\"width\", 100)\n          .attr(\"x\", 30) // Set the x-coordinate\n          .attr(\"y\", -40)\n          .attr(\"text-anchor\", \"middle\");\n\n          var activeCounter = 0;\n\n        /////////////////////////////////table code\n          const tableContainer = d3.select(\"#dashboard-table\");\n\n    // Create table element\n    const table = tableContainer.append(\"table\");\n\n    // Create table header\n    const headerRow = table.append(\"tr\");\n    const headers = Object.keys(origData[0]);\n    headers.forEach(function(header) {\n      headerRow.append(\"th\")\n        .text(header);\n    });\n\n    // Create table rows\n    const rows = table.selectAll(\"tr.row\")\n      .data(origData)\n      .enter()\n      .append(\"tr\")\n      .attr(\"class\", \"row\");\n\n    // Create table cells\n    const cells = rows.selectAll(\"td.cell\")\n      .data(function(row) {\n        return headers.map(function(header) {\n          return { column: header, value: row[header] === null || row[header]===\"\" ? \"Null\" : row[header]};\n        });\n      })\n      .enter()\n      .append(\"td\")\n      .attr(\"class\", \"cell\")\n      .text(function(d) { return d.value; });\n\n\n\n\n\n\n      function handleClick() {\n                var isActive = d3.select(this).classed(\"highlighted\");\n                var customMedianIsActive = d3.selectAll(\"g.highlighted-line-group\").nodes().length >=1 ? true : false;\n                if(customMedianIsActive) d3.selectAll(\"g.highlighted-line-group\").remove();\n                if(isActive){\n                  d3.select(this).classed(\"highlighted\", false);\n                  d3.select(this.parentNode).classed(\"highlighted\", false);\n                  activeCounter--;\n                }else if(!isActive && activeCounter < 2){\n                  d3.select(this).classed(\"highlighted\", true);\n                  d3.select(this.parentNode).classed(\"highlighted\", true);\n                  activeCounter++;\n                  if(activeCounter === 2){\n                    var highlightedCircles = d3.selectAll(\"circle.highlighted\").nodes();\n                    console.log(\"checkpoint 3\");\n                    var indices = highlightedCircles.map(circle => d3.selectAll(\"circle\").nodes().indexOf(circle));\n                    var specifiedIntervalArr = Toolbox.createIntervalArray(\"Milestone \" + (indices[0] + 1), \"Milestone \" + (indices[1] + 1), data);\n                    var specifiedIntervalMedian = Toolbox.createIntervalMedian(specifiedIntervalArr);\n                    var selectedCircles = d3.selectAll(\"circle.highlighted\").nodes();\n                    var selectedGroups = d3.selectAll(\"g.highlighted\").nodes();\n                    console.log(\"selected groups are: \" + selectedGroups[0].getAttribute(\"transform\"));\n                    var group1Transform = selectedGroups[0].getAttribute(\"transform\");\n                    var group2Transform = selectedGroups[1].getAttribute(\"transform\");\n                    var group1Convert = group1Transform.split(/[\\(,]+/);\n                    var group2Convert = group2Transform.split(/[\\(,]+/);\n                    var group1X = parseInt(group1Convert[1], 10);\n                    var group2X = parseInt(group2Convert[1], 10);\n                    var hgroup = svg.append(\"g\")\n                    .attr(\"class\", \"highlighted-line-group\");\n                    var firstLine = hgroup.append(\"line\")\n                    .attr(\"class\", \"highlighted-line\")\n                    .attr(\"x1\", group1X + (+selectedCircles[0].getAttribute(\"cx\")))\n                    .attr(\"y1\", yAxis + (+selectedCircles[0].getAttribute(\"r\")))\n                    .attr(\"x2\", group1X + (+selectedCircles[0].getAttribute(\"cx\")))\n                    .attr(\"y2\", yAxis+25)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1);\n                    var longLine = hgroup.append(\"line\")\n                    .attr(\"class\", \"highlighted-line\")\n                    .attr(\"x1\", group1X + (+selectedCircles[0].getAttribute(\"cx\")))\n                    .attr(\"y1\", yAxis+25)\n                    .attr(\"x2\", group2X + (+selectedCircles[1].getAttribute(\"cx\")))\n                    .attr(\"y2\", yAxis+25)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1);\n                    hgroup.append(\"line\")\n                    .attr(\"class\", \"highlighted-line\")\n                    .attr(\"x1\", group2X + (+selectedCircles[1].getAttribute(\"cx\")))\n                    .attr(\"y1\", yAxis + (+selectedCircles[0].getAttribute(\"r\")))\n                    .attr(\"x2\", group2X + (+selectedCircles[1].getAttribute(\"cx\")))\n                    .attr(\"y2\", yAxis+25)\n                    .attr(\"stroke\", \"black\")\n                    .attr(\"stroke-width\", 1);\n                    hgroup.append(\"text\")\n                    .text(specifiedIntervalMedian)\n                    .attr(\"width\", 100)\n                    .attr(\"x\", (+longLine.attr(\"x2\") + +longLine.attr(\"x1\"))/2)  // Set the x-coordinate\n                    .attr(\"y\", yAxis + 45)\n                    .attr(\"text-anchor\", \"middle\");\n\n                  }\n                }else if(activeCounter === 2){\n                  d3.selectAll(\"circle.highlighted\").classed(\"highlighted\", false);\n                  d3.selectAll(\"g.highlighted\").classed(\"highlighted\", false);\n                  d3.select(this).classed(\"highlighted\", true);\n                  d3.select(this.parentNode).classed(\"highlighted\", true);\n                  activeCounter = 1;\n                }\n              }\n\n    //-------Dismount-------//\n      return()=>{\n        d3.selectAll(\"circle\").on(\"click\", null);\n        table.remove();\n        svg.selectAll(\"*\").remove();\n        svgRef.current = null;\n        data = null;\n        origData = null;\n        milestoneArr = null;\n        console.log(\"data dismounted\");\n      };\n    }, [dataset]);\n}\n\nexport default Draw;","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/dashboard/toolbox.js",["92"],[],"\nfunction hello (){\n\tconsole.log(\"hello world\");\n}\n\n\nfunction convertDate(dateString){\n    console.log(\"date strong : \" + dateString);\n\tvar parts = dateString.split('-');\n\tvar day = parseInt(parts[0], 10);\n\tvar monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\tvar month = monthNames.indexOf(parts[1]);\n\tvar year = 2000 + parseInt(parts[2], 10); // Assuming the year is in the range of 2000-2099\n\treturn new Date(year, month, day);\n}\n\nfunction createMilestoneArr(data){\n\tvar milestoneArr = [];\n\tfor(var i = 1, j = 2; j < 8; i++, j++){\n\t\tvar intervalArr = createIntervalArray(\"Milestone \" + i, \"Milestone \" + j, data);\n\t\tmilestoneArr.push(intervalArr);\n\t}\n\treturn milestoneArr;\n}\n\nfunction createIntervalArray(milestoneA, milestoneB, data){\n\tvar intervalArr = [];\n\tdata.forEach(function(dataNode){\n\t\tif(dataNode[milestoneA] && dataNode[milestoneB])\n\t\t\tintervalArr.push(getDifferenceDaysByDate(milestoneA, milestoneB, dataNode));\n\t});\n\tintervalArr = intervalArr.filter(x=>x!==undefined && x>-1);\n\tconsole.log(milestoneA,milestoneB, intervalArr.sort(function(a,b){ return a-b; }));\n\treturn intervalArr.sort(function(a,b){ return a-b; });\n}\n\nfunction getDifferenceDaysByDate(milestoneA, milestoneB, dataNode){\n\tif(dataNode[milestoneB] && dataNode[milestoneA]){\n\t\treturn Math.round((dataNode[milestoneB].getTime() - dataNode[milestoneA].getTime()) / 86400000);\n\t}\n}\n\nfunction createIntervalMedian(intervalArr){\n\tvar half = intervalArr.length/2;\n\n\tif(intervalArr.length %2 === 0){\n\t\t//size is even, must grab the two middle vals\n\t\tvar a = intervalArr[half-1];\n\t\tvar b = intervalArr[half];\n\t\tvar median = Math.round((a + b)/ 2);\n\t\treturn median;\n\t}\n\telse\n\t\treturn intervalArr[Math.ceil(half)-1];\n}\n\nexport {\n    convertDate,\n    createMilestoneArr,\n    createIntervalArray,\n    getDifferenceDaysByDate,\n    createIntervalMedian\n}","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/mbta-tracker/Map.js",["93","94","95","96","97","98","99"],[],"import { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport Draw from'./draw.js';\nimport Vehicles from'./Vehicles.js';\nimport Select from 'react-select';\n\n\nfunction Map() { \n  const svgRef = useRef(null);\n  const [stationData, setStationData] = useState(null);\n  const [stationMapping, setStationMapping] = useState(null);\n  const [selectedLine, setSelectedLine] = useState(\"Green-E\");\n  const [dataReady, setDataReady] = useState(false);\n\n  var backendHost = \"localhost:8080/\";\n  var controllerEndpoint = \"mbta/v1/livemap\";\n  var vehiclePositionSub = \"/vehicle/location/\" + selectedLine;\n  var mbtaStopsEndpoint = \"/stops/line/\" + selectedLine;\n  var stationMappingEndpoint = \"/stops/child-parent-relation\";\n  const options = [\n    //{ value: 'Green-A', label: 'Green-A' },\n    //{ value: 'Green-B', label: 'Green-B' }, closed line \n    { value: 'Green-C', label: 'Green-C' }, \n//    { value: 'Green-D', label: 'Green-D' }, //stop #71199 not in mapping, where the hell is it\n    { value: 'Green-E', label: 'Green-E' },\n//    { value: 'Orange', label: 'Orange' },\n  ];\n\nuseEffect(()=>{\nsetDataReady(false);\n////////////////////////////////////////////////////////////\n  var xhr = new XMLHttpRequest();//\n    // Making our connection \n  var url = \"http://\" + backendHost + controllerEndpoint + mbtaStopsEndpoint;\n  xhr.open(\"GET\", url, true);\n \n    // function execute after request is successful\n  xhr.onreadystatechange = function () {\n    console.log(\"hi\");\n    if (this.readyState == 4 && this.status == 200) {\n        var temp = JSON.parse(this.responseText);\n        var stationDataTemp = Object.keys(temp).map(v => ({[v.replace(/['\"]+/g, '')]: {...temp[v]}}));\n        console.log(stationDataTemp);\n        setStationData(stationDataTemp);     \n    }\n  }\n  xhr.onerror = function (error){\n      console.error(error);\n    };\n  xhr.send();\n  console.log(\"sent #1\");\n\n///////////////////////////////////////////\n  var xhr2 = new XMLHttpRequest();\n    // Making our connection \n  var url2 = \"http://\" + backendHost + controllerEndpoint + stationMappingEndpoint;\n  xhr2.open(\"GET\", url2, true);\n    // function execute after request is successful\n  xhr2.onreadystatechange = function () {\n    console.log(\"hi\");\n    if (this.readyState == 4 && this.status == 200) {\n        var temp = JSON.parse(this.responseText);\n        console.log(\"mapping .. :\", temp);\n        setStationMapping(temp);      \n    }\n  }\n  xhr2.onerror = function (error){\n      console.error(error);\n    };\n  xhr2.send();\n  console.log(\"sent #2\");\n/////////////////////////\n},[selectedLine]);\n\nuseEffect(()=>{\n  if(stationData != null && stationMapping != null){\n    setDataReady(true);\n  }\n}, [stationData, stationMapping]);\n  const handleChange = (selectedOption) => {\n    setSelectedLine(selectedOption.value);\n    console.log(`Option selected:`, selectedOption.value);\n  };\n\n\n  return (\n    <div className=\"Map\">\n     <Select options={options} onChange={handleChange} placeholder={selectedLine}/>\n    {dataReady && options != null ? (\n      <>\n      <h2>{selectedLine}</h2>\n      <svg ref={svgRef} >\n        <Draw stationData={stationData} svgRef={svgRef} selectedLine={selectedLine}/>\n        <Vehicles svgRef={svgRef} stationData={stationData} stationMapping={stationMapping} selectedLine={selectedLine}/>\n      </svg>\n      </>\n    ) : (<div>Loading...</div>)\n    }\n    </div>\n  );\n\n}\n\nexport default Map;\n","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/mbta-tracker/draw.js",["100","101","102","103"],[],"import { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\n\n  \n  function Draw({ svgRef, stationData, selectedLine}) {\n  var lineYAxis = 200;\n  var circleRadius = 2;\n  console.log(\"st data .. \", stationData);\n  useEffect(()=>{\n\n    var svg = d3.select(svgRef.current)\n    .attr(\"viewBox\", `0 0 ${30 + stationData.length * 60} 400`)\n    .attr(\"preserveAspectRatio\", \"xMidYMid meet\");\n\n    //create stations//\n    var stopGroup = svg.selectAll(\"g\")\n    .data(stationData)\n    .enter()\n    .append(\"g\")\n    .attr(\"transform\", function(d, i) {\n      return \"translate(\" + (30 + i * 60) + \", \" + (lineYAxis) + \")\";\n    })\n    .attr(\"id\", d=>Object.keys(d)[0]);\n\n    stopGroup.append(\"circle\")\n    .attr(\"cx\", 0)\n    .attr(\"cy\", 0)\n    .attr(\"r\", circleRadius)\n    .attr(\"fill\", \"green\")\n    .attr(\"class\", \"station\");\n\n    stopGroup.append(\"text\")\n    .text(function(d) {\n      return d[Object.keys(d)[0]].name;\n    })\n    .attr(\"width\", 100)\n    .attr(\"x\", 0) // Set the x-coordinate\n    .attr(\"y\", -10)\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"font-size\", 5);\n    var stops = svg.selectAll(\"circle\").nodes();\n\n    for(var i = 0; i < stops.length-1; i++){\n    var node1 = stops[i];\n    var node2 = stops[i+1];\n\n    console.log(\"test: \" + '');\n    svg.append(\"line\")\n    .attr(\"x1\", 30 + i * 60)\n    .attr(\"y1\", lineYAxis)\n    .attr(\"x2\", 30 + (i + 1) * 60)\n    .attr(\"y2\", lineYAxis)\n    .attr(\"stroke\", \"green\")\n    .attr(\"stroke-width\", 1);\n\n    console.log(\"Circle absolute position:\", node1.r);\n    console.log(stops[i]);\n    }\n   },[stationData]);  \n \n}\n\nexport default Draw;\n","/Users/austin/Dev Projects/website/austinengel17.github.io/frontend/src/mbta-tracker/Vehicles.js",["104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127"],[],"import { useState, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport '../Vehicles.css';\n\n\nfunction Vehicles({ svgRef, stationData, stationMapping, selectedLine}) { \n    const [vehicleList, setVehicleList] = useState([]);\n    var backendHost = \"localhost:8080/\";\n    var controllerEndpoint = \"mbta/v1/livemap\";\n    var vehiclePositionSub = \"/vehicle/location/\" + selectedLine;\n    var mbtaStopsEndpoint = \"/stops/line/\" + selectedLine;\n    var inTransitTo = \"IN_TRANSIT_TO\";\n    var incomingAt = \"INCOMING_AT\";\n\n\n    useEffect(() => {\n      const svg = svgRef.current;         \n      var svgElement = d3.select(svg);    //left facing arrow marker\n\n      svgElement.selectAll(\"g.vehicle-group\")\n      .data(vehicleList, d=>d.id)\n      .join(\n        (enter) => {\n          var vGroup = enter.append(\"g\")\n          .attr(\"class\", \"vehicle-group\")\n          .attr(\"transform\", function(d, i){\n            var stopId = d.stopId;\n              var stopName = stationMapping[stopId];\n              console.log('stop id: ', stopName);\n              console.log('stop id: ', stopId);\n              var station = svgElement.selectAll(\"#\" + stopName)\n              if(station.node() != null){\n                  var transformString = station.attr(\"transform\");\n                  var convert = transformString.split(/[\\(,]+/);\n                  var x = parseInt(convert[1], 10);\n                  var directionId = d.directionId;\n                  if(d.currentStatus == inTransitTo){\n                    if(directionId == 0)\n                      x=x+30;\n                    else\n                      x=x-30;\n                  }\n                  if(d.currentStatus == incomingAt){\n                    if(directionId == 0)\n                      x=x+15;\n                    else\n                      x=x-15;\n                  }\n\n              var vehicleY = d.directionId == 0 ? 205 : 175;\n              return \"translate(\" + x + \" , \" + vehicleY +\")\";\n              }\n          });\n\n           vGroup.append(\"polygon\") \n            .attr(\"points\", function(d){\n              if(d.directionId == 1)\n                return \"3,0 -3,0 -3,7 3,7 7,3\"; //outbound\n              else\n                return \"-3,5 3,5 3,12 -3,12 -7,8\"; //inbound\n            })\n            .attr(\"fill\", \"lightgrey\");\n\n          vGroup\n          .append(\"text\")\n          .attr(\"class\", \"vehicle\")\n          .attr(\"x\", function(d){\n            var textX = d.directionId == 0 ? 15 : 20\n            return textX;\n          })\n          .attr(\"y\",0)\n          .attr(\"font-size\", 5)\n          .attr(\"transform\", function(d){\n            var rotation = d.directionId == 0 ? 45 : -45;\n            return \"rotate(\" + rotation + \")\";\n          })\n          .text(function(d){\n            var stopId = d.stopId;\n            var stopName = stationMapping[stopId];\n            return d.id + \" - \" + d.currentStatus + ' - ' + stationData[stationMapping[stopId]] + ' - direction: ' + d.directionId;\n          });\n      },\n      (update) => {\n        update\n        .transition()\n        .duration(3000)\n        .attr(\"transform\", function(d, i){\n            var stopId = d.stopId;\n              var stopName = stationMapping[stopId];\n              var station = svgElement.select(\"#\" + stopName)\n              console.log('stop name: ', stopName);\n              console.log('stop id:  ', stopId);\n              if(station.node() != null){\n                  var transformString = station.attr(\"transform\");\n                  var convert = transformString.split(/[\\(,]+/);\n                  var x = parseInt(convert[1], 10);\n                  var directionId = d.directionId;\n                  if(d.currentStatus == inTransitTo){\n                    if(directionId == 0)\n                      x=x+30;\n                    else\n                      x=x-30;\n                  }\n                  if(d.currentStatus == incomingAt){\n                    if(directionId == 0)\n                      x=x+15;\n                    else\n                      x=x-15;\n                  }\n                    var vehicleY = d.directionId == 0 ?  205 : 175;\n                    return \"translate(\" + x + \" , \" + vehicleY +\")\";\n                }\n            });\n            update.select(\"polygon\")\n              .attr(\"points\", function(d){\n                  if(d.directionId == 1)\n                    return \"3,0 -3,0 -3,7 3,7 7,3\"; //outbound\n                  else\n                    return \"-3,5 3,5 3,12 -3,12 -7,8\"; //inbound\n                })\n            update.select(\"text\").text(function(d){\n              var stopId = d.stopId;\n              var stopName = stationMapping[stopId];\n              return d.id + \" - \" + d.currentStatus + ' - ' + stationMapping[stopId] + ' - direction: ' + d.directionId;\n            })\n            .attr(\"transform\", function(d){\n              var rotation = d.directionId == 0 ? 45 : -45;\n              return \"rotate(\" + rotation + \")\";\n            });\n      },\n      (exit) => {\n        exit.remove(); \n    } \n      );\n    }, [vehicleList]);\n\n    //Load vehicles below\n    useEffect(() => {\n      const evtSource = new EventSource(\"http://\" + backendHost + controllerEndpoint + vehiclePositionSub);\n      evtSource.onmessage = (data) => {\n        var eventData = JSON.parse(data.data);\n        console.log(\"Event data .. \", eventData);\n        var vehicleData = eventData.vehicleData;\n        if(eventData.event == \"reset\"){\n          console.log(\"reset\");\n          setVehicleList(vehicleData);\n        } else if(eventData.event == \"update\"){\n          setVehicleList((prevList) => {\n          var newData = prevList.map((item) => {\n            if (item.id === vehicleData[0].id && !(item.currentStatus === vehicleData[0].currentStatus)) {\n              return vehicleData[0];\n            }\n            return item;\n          });\n          console.log(\"update\", newData);\n          return newData;\n        });\n        }\n\n      };\n      evtSource.onerror = function (error) {\n        console.error('EventSource error:', error);\n      };\n      //close out event subscription on close of component\n      return () => {\n        evtSource.close();\n      };\n    },[selectedLine]);\n}\n\n\n\nexport default Vehicles;\n",{"ruleId":"128","severity":1,"message":"129","line":28,"column":13,"nodeType":"130","messageId":"131","endLine":28,"endColumn":72,"fix":"132"},{"ruleId":"133","severity":1,"message":"134","line":1,"column":8,"nodeType":"135","messageId":"136","endLine":1,"endColumn":14},{"ruleId":"133","severity":1,"message":"137","line":7,"column":11,"nodeType":"135","messageId":"136","endLine":7,"endColumn":18},{"ruleId":"133","severity":1,"message":"138","line":2,"column":8,"nodeType":"135","messageId":"136","endLine":2,"endColumn":12},{"ruleId":"133","severity":1,"message":"139","line":4,"column":10,"nodeType":"135","messageId":"136","endLine":4,"endColumn":16},{"ruleId":"133","severity":1,"message":"140","line":39,"column":15,"nodeType":"135","messageId":"136","endLine":39,"endColumn":21},{"ruleId":"133","severity":1,"message":"141","line":146,"column":11,"nodeType":"135","messageId":"136","endLine":146,"endColumn":16},{"ruleId":"142","severity":1,"message":"143","line":185,"column":65,"nodeType":"144","messageId":"145","endLine":185,"endColumn":66,"suggestions":"146"},{"ruleId":"142","severity":1,"message":"143","line":186,"column":65,"nodeType":"144","messageId":"145","endLine":186,"endColumn":66,"suggestions":"147"},{"ruleId":"133","severity":1,"message":"148","line":191,"column":25,"nodeType":"135","messageId":"136","endLine":191,"endColumn":34},{"ruleId":"149","severity":1,"message":"150","line":243,"column":8,"nodeType":"151","endLine":243,"endColumn":17,"suggestions":"152"},{"ruleId":"133","severity":1,"message":"153","line":2,"column":10,"nodeType":"135","messageId":"136","endLine":2,"endColumn":15},{"ruleId":"133","severity":1,"message":"154","line":2,"column":13,"nodeType":"135","messageId":"136","endLine":2,"endColumn":15},{"ruleId":"133","severity":1,"message":"155","line":17,"column":7,"nodeType":"135","messageId":"136","endLine":17,"endColumn":25},{"ruleId":"156","severity":1,"message":"157","line":40,"column":25,"nodeType":"158","messageId":"159","endLine":40,"endColumn":27},{"ruleId":"156","severity":1,"message":"157","line":40,"column":45,"nodeType":"158","messageId":"159","endLine":40,"endColumn":47},{"ruleId":"156","severity":1,"message":"157","line":61,"column":25,"nodeType":"158","messageId":"159","endLine":61,"endColumn":27},{"ruleId":"156","severity":1,"message":"157","line":61,"column":45,"nodeType":"158","messageId":"159","endLine":61,"endColumn":47},{"ruleId":"149","severity":1,"message":"160","line":73,"column":3,"nodeType":"151","endLine":73,"endColumn":17,"suggestions":"161"},{"ruleId":"133","severity":1,"message":"162","line":1,"column":10,"nodeType":"135","messageId":"136","endLine":1,"endColumn":18},{"ruleId":"133","severity":1,"message":"163","line":45,"column":9,"nodeType":"135","messageId":"136","endLine":45,"endColumn":14},{"ruleId":"164","severity":1,"message":"165","line":47,"column":26,"nodeType":"158","messageId":"166","endLine":47,"endColumn":27},{"ruleId":"149","severity":1,"message":"167","line":59,"column":6,"nodeType":"151","endLine":59,"endColumn":19,"suggestions":"168"},{"ruleId":"133","severity":1,"message":"169","line":11,"column":9,"nodeType":"135","messageId":"136","endLine":11,"endColumn":26},{"ruleId":"142","severity":1,"message":"143","line":34,"column":57,"nodeType":"144","messageId":"145","endLine":34,"endColumn":58,"suggestions":"170"},{"ruleId":"156","severity":1,"message":"157","line":37,"column":38,"nodeType":"158","messageId":"159","endLine":37,"endColumn":40},{"ruleId":"156","severity":1,"message":"157","line":38,"column":36,"nodeType":"158","messageId":"159","endLine":38,"endColumn":38},{"ruleId":"156","severity":1,"message":"157","line":43,"column":38,"nodeType":"158","messageId":"159","endLine":43,"endColumn":40},{"ruleId":"156","severity":1,"message":"157","line":44,"column":36,"nodeType":"158","messageId":"159","endLine":44,"endColumn":38},{"ruleId":"156","severity":1,"message":"157","line":50,"column":44,"nodeType":"158","messageId":"159","endLine":50,"endColumn":46},{"ruleId":"156","severity":1,"message":"157","line":57,"column":32,"nodeType":"158","messageId":"159","endLine":57,"endColumn":34},{"ruleId":"156","severity":1,"message":"157","line":68,"column":39,"nodeType":"158","messageId":"159","endLine":68,"endColumn":41},{"ruleId":"156","severity":1,"message":"157","line":74,"column":42,"nodeType":"158","messageId":"159","endLine":74,"endColumn":44},{"ruleId":"133","severity":1,"message":"171","line":79,"column":17,"nodeType":"135","messageId":"136","endLine":79,"endColumn":25},{"ruleId":"142","severity":1,"message":"143","line":95,"column":57,"nodeType":"144","messageId":"145","endLine":95,"endColumn":58,"suggestions":"172"},{"ruleId":"156","severity":1,"message":"157","line":98,"column":38,"nodeType":"158","messageId":"159","endLine":98,"endColumn":40},{"ruleId":"156","severity":1,"message":"157","line":99,"column":36,"nodeType":"158","messageId":"159","endLine":99,"endColumn":38},{"ruleId":"156","severity":1,"message":"157","line":104,"column":38,"nodeType":"158","messageId":"159","endLine":104,"endColumn":40},{"ruleId":"156","severity":1,"message":"157","line":105,"column":36,"nodeType":"158","messageId":"159","endLine":105,"endColumn":38},{"ruleId":"156","severity":1,"message":"157","line":110,"column":50,"nodeType":"158","messageId":"159","endLine":110,"endColumn":52},{"ruleId":"156","severity":1,"message":"157","line":116,"column":36,"nodeType":"158","messageId":"159","endLine":116,"endColumn":38},{"ruleId":"133","severity":1,"message":"171","line":123,"column":19,"nodeType":"135","messageId":"136","endLine":123,"endColumn":27},{"ruleId":"156","severity":1,"message":"157","line":127,"column":44,"nodeType":"158","messageId":"159","endLine":127,"endColumn":46},{"ruleId":"149","severity":1,"message":"173","line":135,"column":8,"nodeType":"151","endLine":135,"endColumn":21,"suggestions":"174"},{"ruleId":"156","severity":1,"message":"157","line":144,"column":28,"nodeType":"158","messageId":"159","endLine":144,"endColumn":30},{"ruleId":"156","severity":1,"message":"157","line":147,"column":35,"nodeType":"158","messageId":"159","endLine":147,"endColumn":37},{"ruleId":"149","severity":1,"message":"175","line":168,"column":7,"nodeType":"151","endLine":168,"endColumn":21,"suggestions":"176"},"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"177","text":"178"},"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'bodyRef' is assigned a value but never used.","'data' is defined but never used.","'useRef' is defined but never used.","'xStart' is assigned a value but never used.","'cells' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\(.","Literal","unnecessaryEscape",["179","180"],["181","182"],"'firstLine' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'svgRef'. Either include it or remove the dependency array.","ArrayExpression",["183"],"'hello' is defined but never used.","'d3' is defined but never used.","'vehiclePositionSub' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'backendHost', 'controllerEndpoint', 'mbtaStopsEndpoint', and 'stationMappingEndpoint'. Either include them or remove the dependency array.",["184"],"'useState' is defined but never used.","'node2' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has missing dependencies: 'circleRadius', 'lineYAxis', and 'svgRef'. Either include them or remove the dependency array.",["185"],"'mbtaStopsEndpoint' is assigned a value but never used.",["186","187"],"'stopName' is assigned a value but never used.",["188","189"],"React Hook useEffect has missing dependencies: 'inTransitTo', 'incomingAt', 'stationData', 'stationMapping', and 'svgRef'. Either include them or remove the dependency array.",["190"],"React Hook useEffect has missing dependencies: 'backendHost', 'controllerEndpoint', and 'vehiclePositionSub'. Either include them or remove the dependency array.",["191"],[1017,1017]," rel=\"noreferrer\"",{"messageId":"192","fix":"193","desc":"194"},{"messageId":"195","fix":"196","desc":"197"},{"messageId":"192","fix":"198","desc":"194"},{"messageId":"195","fix":"199","desc":"197"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"messageId":"192","fix":"206","desc":"194"},{"messageId":"195","fix":"207","desc":"197"},{"messageId":"192","fix":"208","desc":"194"},{"messageId":"195","fix":"209","desc":"197"},{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},"removeEscape",{"range":"214","text":"215"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"216","text":"217"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"218","text":"215"},{"range":"219","text":"217"},"Update the dependencies array to be: [dataset, svgRef]",{"range":"220","text":"221"},"Update the dependencies array to be: [backendHost, controllerEndpoint, mbtaStopsEndpoint, selectedLine, stationMappingEndpoint]",{"range":"222","text":"223"},"Update the dependencies array to be: [circleRadius, lineYAxis, stationData, svgRef]",{"range":"224","text":"225"},{"range":"226","text":"215"},{"range":"227","text":"217"},{"range":"228","text":"215"},{"range":"229","text":"217"},"Update the dependencies array to be: [inTransitTo, incomingAt, stationData, stationMapping, svgRef, vehicleList]",{"range":"230","text":"231"},"Update the dependencies array to be: [backendHost, controllerEndpoint, selectedLine, vehiclePositionSub]",{"range":"232","text":"233"},[6968,6969],"",[6968,6968],"\\",[7041,7042],[7041,7041],[9819,9828],"[dataset, svgRef]",[2574,2588],"[backendHost, controllerEndpoint, mbtaStopsEndpoint, selectedLine, stationMappingEndpoint]",[1550,1563],"[circleRadius, lineYAxis, stationData, svgRef]",[1314,1315],[1314,1314],[3521,3522],[3521,3521],[5015,5028],"[inTransitTo, incomingAt, stationData, stationMapping, svgRef, vehicleList]",[6148,6162],"[backendHost, controllerEndpoint, selectedLine, vehiclePositionSub]"]